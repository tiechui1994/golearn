// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	Latitude             int32    `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32    `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86eda198d7dac6f, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Rectangle struct {
	Lo                   *Point   `protobuf:"bytes,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi                   *Point   `protobuf:"bytes,2,opt,name=hi,proto3" json:"hi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86eda198d7dac6f, []int{1}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetLo() *Point {
	if m != nil {
		return m.Lo
	}
	return nil
}

func (m *Rectangle) GetHi() *Point {
	if m != nil {
		return m.Hi
	}
	return nil
}

type Feature struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location             *Point   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86eda198d7dac6f, []int{2}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

type RouteNote struct {
	Location             *Point   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteNote) Reset()         { *m = RouteNote{} }
func (m *RouteNote) String() string { return proto.CompactTextString(m) }
func (*RouteNote) ProtoMessage()    {}
func (*RouteNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86eda198d7dac6f, []int{3}
}

func (m *RouteNote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteNote.Unmarshal(m, b)
}
func (m *RouteNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteNote.Marshal(b, m, deterministic)
}
func (m *RouteNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteNote.Merge(m, src)
}
func (m *RouteNote) XXX_Size() int {
	return xxx_messageInfo_RouteNote.Size(m)
}
func (m *RouteNote) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteNote.DiscardUnknown(m)
}

var xxx_messageInfo_RouteNote proto.InternalMessageInfo

func (m *RouteNote) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RouteNote) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RouteSummary struct {
	// The number of points received.
	PointCount int32 `protobuf:"varint,1,opt,name=point_count,json=pointCount,proto3" json:"point_count,omitempty"`
	// The number of known features passed while traversing the route.
	FeatureCount int32 `protobuf:"varint,2,opt,name=feature_count,json=featureCount,proto3" json:"feature_count,omitempty"`
	// The distance covered in metres.
	Distance int32 `protobuf:"varint,3,opt,name=distance,proto3" json:"distance,omitempty"`
	// The duration of the traversal in seconds.
	ElapsedTime          int32    `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteSummary) Reset()         { *m = RouteSummary{} }
func (m *RouteSummary) String() string { return proto.CompactTextString(m) }
func (*RouteSummary) ProtoMessage()    {}
func (*RouteSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_e86eda198d7dac6f, []int{4}
}

func (m *RouteSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteSummary.Unmarshal(m, b)
}
func (m *RouteSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteSummary.Marshal(b, m, deterministic)
}
func (m *RouteSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSummary.Merge(m, src)
}
func (m *RouteSummary) XXX_Size() int {
	return xxx_messageInfo_RouteSummary.Size(m)
}
func (m *RouteSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSummary proto.InternalMessageInfo

func (m *RouteSummary) GetPointCount() int32 {
	if m != nil {
		return m.PointCount
	}
	return 0
}

func (m *RouteSummary) GetFeatureCount() int32 {
	if m != nil {
		return m.FeatureCount
	}
	return 0
}

func (m *RouteSummary) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RouteSummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "pb.Point")
	proto.RegisterType((*Rectangle)(nil), "pb.Rectangle")
	proto.RegisterType((*Feature)(nil), "pb.Feature")
	proto.RegisterType((*RouteNote)(nil), "pb.RouteNote")
	proto.RegisterType((*RouteSummary)(nil), "pb.RouteSummary")
}

func init() { proto.RegisterFile("google.proto", fileDescriptor_e86eda198d7dac6f) }

var fileDescriptor_e86eda198d7dac6f = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xdd, 0x6a, 0xa3, 0x40,
	0x14, 0xce, 0xb8, 0xc9, 0x26, 0x1e, 0x0d, 0x2c, 0xe7, 0xca, 0x95, 0x85, 0xdd, 0xb5, 0xb4, 0xe4,
	0xca, 0x86, 0xf4, 0x09, 0x42, 0x4a, 0x7b, 0x13, 0x4a, 0x31, 0xbd, 0x0f, 0x13, 0x3d, 0x35, 0x03,
	0xa3, 0x23, 0x3a, 0x16, 0xfa, 0x1c, 0x7d, 0xa3, 0x3e, 0x59, 0x71, 0xd4, 0xfc, 0xb4, 0xf4, 0x6e,
	0xce, 0xf7, 0x87, 0xe7, 0x3b, 0x82, 0x9b, 0x2a, 0x95, 0x4a, 0x0a, 0x8b, 0x52, 0x69, 0x85, 0x56,
	0xb1, 0x0b, 0x96, 0x30, 0x7a, 0x54, 0x22, 0xd7, 0xe8, 0xc3, 0x44, 0x72, 0x2d, 0x74, 0x9d, 0x90,
	0xc7, 0xfe, 0xb1, 0xd9, 0x28, 0x3a, 0xcc, 0xf8, 0x07, 0x6c, 0xa9, 0xf2, 0xb4, 0x25, 0x2d, 0x43,
	0x1e, 0x81, 0x60, 0x09, 0x76, 0x44, 0xb1, 0xe6, 0x79, 0x2a, 0x09, 0x7f, 0x83, 0x25, 0x95, 0x09,
	0x70, 0x16, 0x76, 0x58, 0xec, 0x42, 0x93, 0x1e, 0x59, 0x52, 0x35, 0xd4, 0x5e, 0x18, 0xfb, 0x39,
	0xb5, 0x17, 0xc1, 0x2d, 0x8c, 0xef, 0x88, 0xeb, 0xba, 0x24, 0x44, 0x18, 0xe6, 0x3c, 0x6b, 0xbf,
	0xc1, 0x8e, 0xcc, 0x1b, 0x2f, 0x61, 0x22, 0x55, 0xcc, 0xb5, 0x50, 0xf9, 0x57, 0xff, 0x81, 0x0a,
	0xd6, 0x60, 0x47, 0xaa, 0xd6, 0xf4, 0xa0, 0xf4, 0xb9, 0x87, 0x7d, 0xeb, 0x41, 0x0f, 0xc6, 0x19,
	0x55, 0x15, 0x4f, 0xdb, 0xc5, 0xec, 0xa8, 0x1f, 0x83, 0x37, 0x06, 0xae, 0x89, 0xdb, 0xd4, 0x59,
	0xc6, 0xcb, 0x57, 0xfc, 0x0b, 0x4e, 0xd1, 0xb8, 0xb7, 0xb1, 0xaa, 0x73, 0xdd, 0x95, 0x04, 0x06,
	0x5a, 0x35, 0x08, 0x5e, 0xc0, 0xf4, 0xb9, 0xdd, 0xa2, 0x93, 0xb4, 0x55, 0xb9, 0x1d, 0xd8, 0x8a,
	0x7c, 0x98, 0x24, 0xa2, 0xd2, 0x3c, 0x8f, 0xc9, 0xfb, 0xd1, 0xf6, 0xdc, 0xcf, 0xf8, 0x1f, 0x5c,
	0x92, 0xbc, 0xa8, 0x28, 0xd9, 0x6a, 0x91, 0x91, 0x37, 0x34, 0xbc, 0xd3, 0x61, 0x4f, 0x22, 0xa3,
	0xc5, 0x3b, 0x83, 0xf1, 0x86, 0xca, 0x17, 0x11, 0x13, 0x5e, 0x01, 0xdc, 0x93, 0xee, 0x8b, 0x3b,
	0xae, 0xe7, 0x3b, 0xcd, 0xb3, 0xc3, 0x83, 0x01, 0x86, 0xe0, 0xae, 0x45, 0xd5, 0x0b, 0x2b, 0x9c,
	0x36, 0xf4, 0xe1, 0x64, 0x9f, 0xd4, 0x73, 0x86, 0x21, 0x38, 0x11, 0xc5, 0xaa, 0x4c, 0xcc, 0xfa,
	0xa7, 0xc1, 0xbf, 0x8c, 0xf3, 0xa4, 0x94, 0x60, 0x30, 0x63, 0x78, 0xdd, 0xf5, 0xbe, 0xda, 0x73,
	0xdd, 0x85, 0xf7, 0x67, 0xf0, 0xcf, 0xc7, 0x46, 0x3e, 0x67, 0xbb, 0x9f, 0xe6, 0xff, 0xbb, 0xf9,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xf3, 0x62, 0x5f, 0x8f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	// 一个简单的RPC,客户端使用存根将请求发送到服务器,然后等待响应返回,就像普通的函数调用一样.
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	// 服务器端流式RPC,客户端向服务器发送请求,并获取流以读取回一系列消息.
	// 客户端从返回的流中读取,直到没有更多消息为止.
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (Service_ListFeaturesClient, error)
	// 客户端流式RPC,其中客户端使用gRPC提供的流写入一系列消息并将其发送到服务器.
	// 客户端写完消息后, 它将等待服务器读取所有消息并返回其响应.
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (Service_RecordRouteClient, error)
	// 双向流式RPC,双方都使用读写流发送一系列消息.
	// 这两个流是独立运行的,因此客户端和服务器可以按照自己喜欢的顺序进行读写: 例如,服务器可以在写
	// 响应之前等待接收所有客户端消息,或者可以先读取消息再写入消息,或其他一些读写组合.
	// 每个流中的消息顺序都会保留.
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (Service_RouteChatClient, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/pb.Service/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (Service_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[0], "/pb.Service/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type serviceListFeaturesClient struct {
	grpc.ClientStream
}

func (x *serviceListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (Service_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[1], "/pb.Service/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRecordRouteClient{stream}
	return x, nil
}

type Service_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type serviceRecordRouteClient struct {
	grpc.ClientStream
}

func (x *serviceRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (Service_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Service_serviceDesc.Streams[2], "/pb.Service/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceRouteChatClient{stream}
	return x, nil
}

type Service_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type serviceRouteChatClient struct {
	grpc.ClientStream
}

func (x *serviceRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	// 一个简单的RPC,客户端使用存根将请求发送到服务器,然后等待响应返回,就像普通的函数调用一样.
	GetFeature(context.Context, *Point) (*Feature, error)
	// 服务器端流式RPC,客户端向服务器发送请求,并获取流以读取回一系列消息.
	// 客户端从返回的流中读取,直到没有更多消息为止.
	ListFeatures(*Rectangle, Service_ListFeaturesServer) error
	// 客户端流式RPC,其中客户端使用gRPC提供的流写入一系列消息并将其发送到服务器.
	// 客户端写完消息后, 它将等待服务器读取所有消息并返回其响应.
	RecordRoute(Service_RecordRouteServer) error
	// 双向流式RPC,双方都使用读写流发送一系列消息.
	// 这两个流是独立运行的,因此客户端和服务器可以按照自己喜欢的顺序进行读写: 例如,服务器可以在写
	// 响应之前等待接收所有客户端消息,或者可以先读取消息再写入消息,或其他一些读写组合.
	// 每个流中的消息顺序都会保留.
	RouteChat(Service_RouteChatServer) error
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) GetFeature(ctx context.Context, req *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (*UnimplementedServiceServer) ListFeatures(req *Rectangle, srv Service_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (*UnimplementedServiceServer) RecordRoute(srv Service_RecordRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordRoute not implemented")
}
func (*UnimplementedServiceServer) RouteChat(srv Service_RouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Service/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ListFeatures(m, &serviceListFeaturesServer{stream})
}

type Service_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type serviceListFeaturesServer struct {
	grpc.ServerStream
}

func (x *serviceListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).RecordRoute(&serviceRecordRouteServer{stream})
}

type Service_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type serviceRecordRouteServer struct {
	grpc.ServerStream
}

func (x *serviceRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Service_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).RouteChat(&serviceRouteChatServer{stream})
}

type Service_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type serviceRouteChatServer struct {
	grpc.ServerStream
}

func (x *serviceRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _Service_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _Service_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _Service_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _Service_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google.proto",
}
